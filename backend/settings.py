"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os, sys
from pathlib import Path
import dj_database_url
from dotenv import load_dotenv
from django.utils import timezone

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(BASE_DIR / "backend" / "apps"))
sys.path.insert(0, str(BASE_DIR / "backend" / "core"))

load_dotenv(".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "LocalSecretKey")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get("DEBUG", "1")))

TESTING = len(sys.argv) > 1 and sys.argv[1] == "test"


ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "*").split()
DOMAIN = os.environ.get("DOMAIN", "localhost:8000")
SECURE_SSL_REDIRECT = bool(int(os.environ.get("SECURE_SSL_REDIRECT", "0")))

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",  # allows not tu use whitenoise in local
    "django.contrib.staticfiles",
]
if DEBUG:
    INSTALLED_APPS += [
        "debug_toolbar",
    ]


# custom apps
INSTALLED_APPS += [
    "brightmls",
]


MIDDLEWARE = (
    [
        "django.middleware.security.SecurityMiddleware",
    ]
    + (["debug_toolbar.middleware.DebugToolbarMiddleware"] if DEBUG else [])
    + [
        "whitenoise.middleware.WhiteNoiseMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
    ]
)


ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "backend" / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
CRISPY_TEMPLATE_PACK = "bootstrap4"

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# Get the value from DATABASE_URL environment variable

connection = dj_database_url.parse(
    os.environ.get(
        "DATABASE_URL",
        f"postgres://local_dbuser:local_dbpassword@db/local_db",
    )
)


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": connection["NAME"],
        "USER": connection["USER"],
        "PASSWORD": connection["PASSWORD"],
        "HOST": connection["HOST"],
        "PORT": 5432,
    }
}
# the thing is that we need to have the same database for testing on Heroku
if "amazonaws.com" in DATABASES["default"]["HOST"]:
    DATABASES["default"]["TEST"] = {
        "NAME": DATABASES["default"]["NAME"],
    }


# having a deal with custom Users model
# https://docs.djangoproject.com/en/3.2/topics/auth/customizing/#specifying-a-custom-user-model

# AUTH_USER_MODEL = "registration.User"
# AUTHENTICATION_BACKENDS = ["registration.backends.EmailBackend"]
# LOGIN_URL = "/login/"
# LOGIN_REDIRECT_URL = "/"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Email settings
# https://docs.djangoproject.com/en/3.2/topics/email/
# https://github.com/django-ses/django-ses

EMAIL_BACKEND = os.environ.get(
    "EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend"
)
DEFAULT_FROM_EMAIL = f"noreply@factour.com"


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

USE_I18N = True

# Internationalization Time zone preferences

USE_TZ = True

# TIME_ZONE = "Asia/Tashkent"
TIME_ZONE = "UTC"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
# STATICFILES_DIRS = [
#     str(BASE_DIR / "frontend/build"),
# ]

STORAGES = {
    # "default": {"BACKEND": "db_file_storage.storage.DatabaseFileStorage"},
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage"
        if TESTING
        else "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Form uploading files settings
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240  # (Default: 1000)
DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # 2.5MB (Default value)


# Django Debug Toolbar settings
def show_toolbar(request):
    return DEBUG == True


DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": show_toolbar,
}


# BrightMLS API settings
BRIGHT_MLS_AUTH_URL = os.environ.get("BRIGHT_MLS_AUTH_URL", "")
BRIGHT_MLS_API_URL = os.environ.get("BRIGHT_MLS_API_URL", "")
BRIGHT_MLS_CLIENT_ID = os.environ.get("BRIGHT_MLS_CLIENT_ID", "")
BRIGHT_MLS_CLIENT_SECRET = os.environ.get("BRIGHT_MLS_CLIENT_SECRET", "")


# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "full_format": {
            "format": "%(asctime)s: %(levelname)s %(message)s [%(name)s:%(lineno)d]",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "full_format",
            # 'filters': ['request_id'],
        },
    },
    "loggers": {
        "": {
            "level": "DEBUG" if DEBUG else "WARNING",
            "handlers": ["console"],
        },
    },
}
